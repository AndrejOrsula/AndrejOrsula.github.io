name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}"
  cancel-in-progress: true

permissions:
  contents: read
  pages: write
  id-token: write

env:
  MSRV: "1.76"
  CARGO_TERM_COLOR: always

jobs:
  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      ## cargo fmt
      - name: cargo fmt
        run: cargo fmt --all --check --verbose

  cargo:
    needs: rustfmt
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        toolchain:
          - MSRV
          - stable
          - beta
          - nightly
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name == 'push'}}
      - uses: dtolnay/rust-toolchain@master
        if: ${{ matrix.toolchain != 'MSRV' && matrix.toolchain != 'stable' }}
        with:
          toolchain: ${{ matrix.toolchain }}
      - uses: dtolnay/rust-toolchain@master
        if: ${{ matrix.toolchain == 'MSRV' }}
        with:
          toolchain: ${{ env.MSRV }}
      - uses: dtolnay/rust-toolchain@master
        if: ${{ matrix.toolchain == 'stable' }}
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy

      ## cargo check
      - name: cargo check
        run: cargo check --workspace --all-targets --verbose
      - name: cargo check --no-default-features
        run: cargo check --workspace --all-targets --no-default-features --verbose
      - name: cargo check --all-features
        run: cargo check --workspace --all-targets --all-features --verbose

      ## cargo test
      - name: cargo test
        run: cargo test --workspace --all-targets --verbose
      - name: cargo test --no-default-features
        run: cargo test --workspace --all-targets --no-default-features --verbose
      - name: cargo test --all-features
        run: cargo test --workspace --all-targets --all-features --verbose

      ## cargo test --doc
      - name: cargo test --doc
        run: cargo test --workspace --doc --verbose
      - name: cargo test --doc --no-default-features
        run: cargo test --workspace --doc --no-default-features --verbose
      - name: cargo test --doc --all-features
        run: cargo test --workspace --doc --all-features --verbose

      ## [stable] cargo clippy
      - name: stable | cargo clippy
        if: ${{ matrix.toolchain == 'stable' }}
        run: cargo clippy --workspace --all-targets --all-features --no-deps --verbose -- --deny warnings

      ## [stable] cargo doc
      - name: stable | cargo doc --document-private-items
        if: ${{ matrix.toolchain == 'stable' }}
        run: cargo doc --workspace --all-features --no-deps --document-private-items --verbose

      ## [nightly] Code coverage
      - name: nightly | Install cargo llvm-cov for code coverage
        uses: taiki-e/install-action@cargo-llvm-cov
        if: ${{ matrix.toolchain == 'nightly' }}
      ## [nightly] Generate coverage with cargo llvm-cov
      - name: nightly | Generate coverage
        if: ${{ matrix.toolchain == 'nightly' }}
        run: cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info
      ## [nightly] Upload coverage to codecov.io
      - name: nightly | Upload coverage
        if: ${{ matrix.toolchain == 'nightly' }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: lcov.info
          fail_ci_if_error: false

  cargo_wasm32:
    needs: rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name == 'push'}}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      ## cargo check
      - name: cargo check
        run: cargo check --workspace --all-targets --verbose
      - name: cargo check --no-default-features
        run: cargo check --workspace --all-targets --no-default-features --verbose
      - name: cargo check --all-features
        run: cargo check --workspace --all-targets --all-features --verbose

      ## cargo test
      - name: cargo test
        run: cargo test --workspace --all-targets --verbose
      - name: cargo test --no-default-features
        run: cargo test --workspace --all-targets --no-default-features --verbose
      - name: cargo test --all-features
        run: cargo test --workspace --all-targets --all-features --verbose

      ## cargo test --doc
      - name: cargo test --doc
        run: cargo test --workspace --doc --verbose
      - name: cargo test --doc --no-default-features
        run: cargo test --workspace --doc --no-default-features --verbose
      - name: cargo test --doc --all-features
        run: cargo test --workspace --doc --all-features --verbose

  deny:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check bans licenses sources

  build:
    needs:
      - cargo_wasm32
      - deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: ${{ github.event_name == 'push'}}
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      - name: Download trunk binary
        run: wget -qO- https://github.com/thedodd/trunk/releases/latest/download/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
      - name: Build
        run: ./trunk build --release --public-url "https://${{ github.repository_owner }}.github.io"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    if: ${{ github.event_name != 'pull_request' }}
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy
        id: deployment
        uses: actions/deploy-pages@v4
